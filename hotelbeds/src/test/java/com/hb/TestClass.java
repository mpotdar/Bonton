package com.hb;


public class TestClass {

	public static void main(String[] args) {
		/*
try {
			
            // Signature is generated by SHA256 
           
	StringBuilder stringBuilder = new StringBuilder();
	
	 String signature = org.apache.commons.codec.digest.DigestUtils
            .sha256Hex(HBProperties.API_KEY + HBProperties.SHARED_SECRET + System.currentTimeMillis() / 1000);
	 System.out.println("Signature  "+signature);
    String json = "{\"occupancies\":[{\"rooms\":1,\"children\":1,\"adults\":2,\"paxes\":[{\"type\":\"AD\",\"age\":30},{\"type\":\"AD\",\"age\":30},{\"type\":\"CH\",\"age\":2}]}],\"stay\":{\"checkIn\":\"2016-05-25\",\"checkOut\":\"2016-05-28\",\"shiftDays\":\"2\"},\"destination\": {\"code\": \"DXB\"}}";
    
    URL url = new URL(HBProperties.HB_GET_HOTELS_END_POINT);
    System.out.println("1");
    
    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
    System.out.println("2");
    connection.setRequestMethod( "POST" );
    connection.setRequestProperty("X-Signature", signature);
    connection.setRequestProperty("Api-Key", HBProperties.API_KEY);
    connection.setRequestProperty("Accept", "application/json");
//    connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");
    connection.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
    connection.setRequestProperty("Accept-Encoding", "Gzip");
    
    connection.setDoOutput(true);
    connection.setDoInput(true);
    connection.connect();
    System.out.println("3");
    OutputStreamWriter streamWriter = new OutputStreamWriter(connection.getOutputStream());
    streamWriter.write(json);
    streamWriter.flush();
    System.out.println("4");
    System.out.println("5  "+connection.getResponseCode()+"   kk  "+connection.getResponseMessage());
    InputStream is = connection.getInputStream();
    System.out.println("6");
    if ("gzip".equals(connection.getContentEncoding())) {
        is = new GZIPInputStream(is);
    }
    InputStreamReader streamReader = new InputStreamReader(is);
    BufferedReader bufferedReader = new BufferedReader(streamReader);
    String response = null;
    while ((response = bufferedReader.readLine()) != null) {
        stringBuilder.append(response);
    }
    FileProcessorUtil.writeStringToFile(stringBuilder.toString(), "D:\\dataA.txt");
    bufferedReader.close();
    System.out.println(stringBuilder.toString());
    Gson g = new Gson();
    HBJsonDataContainer hbJaonDataCOntainer = g.fromJson(stringBuilder.toString(), HBJsonDataContainer.class);
    
    AuditData auditData = hbJaonDataCOntainer.getAuditData();
    
    System.out.println(auditData.getEnvironment()+"  <>  "+auditData.getInternal());
    
    FileWriter fileWriter = new FileWriter(new File("D:\\HotelsData1.txt"));
    if(hbJaonDataCOntainer != null) {
    	if(hbJaonDataCOntainer.getAuditData() != null && hbJaonDataCOntainer.getHotels() != null) {
    		
    		HBDataProcessor hbDataProcessor = new HBDataProcessor();
    		
    		String dataString  = hbDataProcessor.getHBDataReponseInAggregationFormat(hbJaonDataCOntainer);
    		
    		FileProcessorUtil.writeStringToFile(dataString, "D:\\data.txt");
    		
    	}
    }
   
    
    
		} catch (Exception e) {
			e.printStackTrace();
		}
	
*/
	}
}
